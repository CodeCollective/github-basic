name: Generate Badge on Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate-badge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install libGL
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1

      - name: Fetch User Full Name
        id: fetch_user_details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          USER_NAME="${{ github.event.pull_request.user.login }}"
          USER_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/users/$USER_NAME)
          USER_FULL_NAME=$(echo "$USER_DETAILS" | jq -r '.name')
          echo "USER_NAME=$USER_NAME" >> $GITHUB_ENV
          echo "USER_FULL_NAME=$USER_FULL_NAME" >> $GITHUB_ENV

      - name: Run generate_badge.py with user details
        id: generate_badge
        env:
          PRIVKEY_BASE64: ${{ secrets.PRIVKEY_BASE64 }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          output=$(python generate_badge.py "$USER_FULL_NAME" "$USER_NAME" "github-basic")
          echo "image_path=${output}" >> $GITHUB_OUTPUT

      - name: Upload badge image
        uses: actions/upload-artifact@v3
        with:
          name: badge-image
          path: ${{ steps.generate_badge.outputs.image_path }}

      - name: Comment on PR with badge image
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = '${{ steps.generate_badge.outputs.image_path }}';
            const image = fs.readFileSync(path, { encoding: 'base64' });
            const comment = `![Badge](data:image/png;base64,${image})`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
