name: Generate Badge on Main Change

on:
  push:
    branches:
      - main

jobs:
  generate-badge:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install libGL
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1

      - name: Run generate_badge.py with user details
        id: generate_badge
        env:
          PRIVKEY_BASE64: ${{ secrets.PRIVKEY_BASE64 }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          if [ -n "$AWS_ACCESS_KEY_ID" ]; then
            echo "AWS credentials are set"
          else
            echo "AWS credentials are missing"
          fi
          output=$(python generate_badge.py "$USER_FULL_NAME" "$USER_NAME" "github-basic")
          echo "badge_url=${output}" >> $GITHUB_OUTPUT  # Capture the URL output

      - name: Upload badge image
        uses: actions/upload-artifact@v3
        with:
          name: badge-image
          path: ${{ steps.generate_badge.outputs.image_path }}

      - name: Comment on the merge
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the badge URL from the output of the Python script
            const badgeUrl = '${{ steps.generate_badge.outputs.badge_url }}';
            
            // Create a comment with the badge URL
            const comment = `Here is the badge: ${badgeUrl}`;
      
            // Fetch the PR associated with the commit (if any)
            const commitSha = '${{ github.sha }}';
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
            });
      
            if (prs.data.length > 0) {
              // Comment on the first PR associated with the commit
              await github.rest.issues.createComment({
                issue_number: prs.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment,
              });
              console.log(`Commented on PR #${prs.data[0].number}`);
            } else {
              console.log('No PR associated with this commit. Skipping comment.');
            }